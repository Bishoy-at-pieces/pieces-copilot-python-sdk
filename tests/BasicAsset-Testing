import pytest
from unittest.mock import Mock, patch, MagicMock
from pieces_os_client import Asset, Format, ClassificationGenericEnum, ClassificationSpecificEnum, Annotations, Annotation
from datetime import datetime
import sys
import importlib.util
from asset import BasicAsset
from ..streamed_identifiers.assets_snapshot import AssetSnapshot
from .client import PiecesClient

class BasicAsset(BasicAsset):
    def __init__(self, id) -> None:
        self.asset:Asset = AssetSnapshot.identifiers_snapshot.get(id)
        if not self.asset:
            print(f"Asset not found for ID: {id}")
            print("Available IDs in AssetSnapshot.identifiers_snapshot:", AssetSnapshot.identifiers_snapshot.keys())
            raise ValueError("Asset not found")

@pytest.fixture(scope="function")
def pieces_client():
    return PiecesClient(config={'baseUrl': 'http://localhost:1000/'})

@pytest.fixture(scope="function", autouse=True)
def setup_asset_snapshot(pieces_client):
    AssetSnapshot.identifiers_snapshot = {}
    print("Before test:", AssetSnapshot.identifiers_snapshot)
    yield
    print("After test:", AssetSnapshot.identifiers_snapshot)
    AssetSnapshot.identifiers_snapshot = {}

@pytest.fixture
def mock_asset():
    mock = MagicMock(spec=Asset)
    mock.id = "test_asset_id"
    mock.name = "Test Asset"
    mock.original = MagicMock()
    mock.original.reference.fragment.string.raw = "Test content"
    mock.original.reference.classification.specific = ClassificationSpecificEnum.PY
    mock.original.reference.classification.generic = ClassificationGenericEnum.CODE
    mock.formats = MagicMock()
    mock.formats.iterable = []
    return mock

@pytest.fixture
def mock_asset_snapshot(mock_asset):
    AssetSnapshot.identifiers_snapshot[mock_asset.id] = mock_asset
    print(f"Added mock asset with ID {mock_asset.id} to AssetSnapshot.identifiers_snapshot")
    return AssetSnapshot

def test_basic_asset_initialization(mock_asset_snapshot, mock_asset):
    print("In test_basic_asset_initialization:")
    print("AssetSnapshot.identifiers_snapshot:", AssetSnapshot.identifiers_snapshot)
    print("mock_asset.id:", mock_asset.id)
    asset = BasicAsset(mock_asset.id)
    assert asset.asset == mock_asset

def test_raw_property(mock_asset_snapshot, mock_asset):
    asset = BasicAsset(mock_asset.id)
    assert asset.raw == "Test content"

def test_is_image(mock_asset_snapshot, mock_asset):
    asset = BasicAsset(mock_asset.id)
    assert not asset.is_image

    mock_asset.original.reference.classification.generic = ClassificationGenericEnum.IMAGE
    assert asset.is_image

def test_classification_property(mock_asset_snapshot, mock_asset):
    asset = BasicAsset(mock_asset.id)
    assert asset.classification == ClassificationSpecificEnum.PY
